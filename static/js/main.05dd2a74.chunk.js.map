{"version":3,"sources":["Easy-peasy/Modals.ts","Easy-peasy/Actions.ts","Easy-peasy/Store.ts","Components/DisplayUserInfo/UserDisplay.tsx","Components/UserInputForm/UserForm.tsx","Components/DynamicUserInfomation/DynamicUserInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["model","users","items","userDetails","userId","userName","userEmail","userAge","createUser","action","state","payload","push","removeUser","filter","user","updateUser","userUpdateIndex","findIndex","console","log","undefined","setUserInfo","userDetailsOnFind","find","val","store","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","clear","UserDisplay","data","editItems","deleteItem","id","name","a","window","confirm","String","Box","p","borderRadius","mb","style","background","Typography","variant","display","IconButton","size","onClick","Icon","fontSize","color","className","Number","to","UserForm","userdata","useState","userInformation","setInfo","toggleButton","setToggleButton","iseditItems","setIsEditItem","inputEventName","event","target","value","Math","random","toString","slice","userinfo","Grid","container","item","md","xs","justifyContent","alignItems","minHeight","boxShadow","backgroundColor","width","onSubmit","preventDefault","autoComplete","FormControl","marginBottom","InputLabel","htmlFor","FilledInput","type","onChange","required","fullWidth","Button","padding","lineHeight","endIcon","CloudCircleRounded","map","key","DynamicUserInfo","useParams","userdetails","theme","createTheme","palette","primary","main","secondary","error","App","ThemeProvider","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAWeA,EAJW,CACxBC,MCGwB,CACxBC,MAAO,GACPC,YAAa,CACXC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,QAAS,GAGXC,WAAYC,aAAO,SAACC,EAAOC,GACzBD,EAAMR,MAAMU,KAAKD,MAEnBE,WAAYJ,aAAO,SAACC,EAAOC,GACzBD,EAAMR,MAAQQ,EAAMR,MAAMY,QAAO,SAACC,GAAD,OAAUA,EAAKX,SAAWO,QAE7DK,WAAYP,aAAO,SAACC,EAAOC,GACzB,IAAMM,EAAkBP,EAAMR,MAAMgB,WAAU,SAACH,GAC7C,OAAOA,EAAKX,SAAWO,EAAQP,UAEjCe,QAAQC,IAAIT,QACaU,IAApBJ,IACDP,EAAMR,MAAMe,GAAiBZ,SAAWM,EAAQN,SAChDK,EAAMR,MAAMe,GAAiBX,UAAYK,EAAQL,UACjDI,EAAMR,MAAMe,GAAiBV,QAAUI,EAAQJ,YAGrDe,YAAab,aAAO,SAACC,EAAOC,GAC1B,IAAMY,EAAoBb,EAAMR,MAAMsB,MAAK,SAAAC,GAAG,OAAIA,EAAIrB,SAAWO,EAAQP,WACrD,OAAjBmB,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBnB,UAAWO,EAAQP,SAEvCM,EAAMP,YAAYC,OAASmB,EAAkBnB,OAC7CM,EAAMP,YAAYE,SAAWkB,EAAkBlB,SAC/CK,EAAMP,YAAYG,UAAYiB,EAAkBjB,UAChDI,EAAMP,YAAYI,QAAUgB,EAAkBhB,cCvC9CmB,EAAQC,YAAYC,YAAQ5B,IAG5B6B,EAAaC,cAINC,EAAkBF,EAAWE,gBAE7BC,GADmBH,EAAWI,iBACdJ,EAAWG,eAExCN,EAAME,QAAQM,QAGCR,Q,OCgCAS,EAtCK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAEnBxB,EAAakB,GAAgB,SAACL,GAAD,OAAWA,EAAMzB,MAAMY,cAEpDyB,EAAU,uCAAG,WAAOC,EAAYC,GAAnB,SAAAC,EAAA,yDACKC,OAAOC,QAAP,gCAAwCJ,EAAxC,oBAAsDC,EAAtD,0BADL,iDAGf3B,EAAW+B,OAAOL,IAHH,2CAAH,wDAMhB,OACI,mCAEI,8BACI,eAACM,EAAA,EAAD,CAAKC,EAAG,EAAGC,aAAc,GAAIC,GAAI,EAAGC,MAAO,CAAEC,WAAY,oBAAzD,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,qBAA8DjB,EAAK/B,YACnE,eAAC8C,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,uBAAgEjB,EAAK9B,UAArE,OACA,eAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,qBAA8DjB,EAAK7B,WACnE,cAAC+C,EAAA,EAAD,CAAYC,KAAK,SAASC,QAAS,WAAQnB,EAAUD,IAAU,aAAW,OAA1E,SACI,cAACqB,EAAA,EAAD,CAAMC,SAAS,QAAQC,MAAM,YAAYC,UAAU,wBAEvD,cAACN,EAAA,EAAD,CAAYC,KAAK,SAASC,QAAS,WAAQlB,EAAWuB,OAAOzB,EAAKhC,QAASgC,EAAK/B,WAAc,aAAW,OAAzG,SACI,cAACoD,EAAA,EAAD,CAAMC,SAAS,QAAQC,MAAM,UAAUC,UAAU,mBAErD,cAAC,IAAD,CAAME,GAAI,gBAAkB1B,EAAKhC,OAAjC,SACA,cAACkD,EAAA,EAAD,CAAYC,KAAK,SAAS,aAAW,OAArC,SACI,cAACE,EAAA,EAAD,CAAMC,SAAS,QAAQC,MAAM,QAAQC,UAAU,oCAZ6BC,OAAOzB,EAAKhC,UAD1FyD,OAAOzB,EAAKhC,Y,mDCkFnB2D,EApGM,WACjB,IAAMC,EAAWhC,GAAc,SAACN,GAAD,OAAWA,EAAMzB,MAAMC,SAChDM,EAAauB,GAAgB,SAACL,GAAD,OAAWA,EAAMzB,MAAMO,cAEpDQ,EAAae,GAAgB,SAACL,GAAD,OAAWA,EAAMzB,MAAMe,cAE1D,EAAmCiD,mBAAgB,CAAE7D,OAAQ,GAAIC,SAAU,GAAIC,UAAW,GAAIC,aAASc,IAAvG,mBAAO6C,EAAP,KAAwBC,EAAxB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAqCJ,qBAArC,mBAAOK,EAAP,KAAoBC,EAApB,KAGMC,EAAiB,SAACC,GAAgD,IAAD,EACnE,EAAwBA,EAAMC,OAAtBlC,EAAR,EAAQA,KAAMmC,EAAd,EAAcA,MACdR,EAAQ,2BAAKD,GAAN,uBAAwB1B,EAAOmC,GAA/B,uBAA8C/B,OAAOiB,OAAOe,KAAKC,SAASC,WAAWC,MAAM,EAAG,OAA9F,MAIL1C,EAAY,SAAC2C,GAGf,OADA7D,QAAQC,IAAI4D,GACRA,EAAS5E,QACTmE,EAAcS,EAAS5E,QACvBiE,GAAgB,GAChBF,EAAQ,CACJ/D,OAAQwC,OAAOoC,EAAS5E,QAASC,SAAU2E,EAAS3E,SAAUC,UAAW0E,EAAS1E,UAAWC,QAASyE,EACjGzE,UAEFyE,EAAS5E,QAEb,MAgBX,OACI,mCACI,eAAC6E,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIpC,MAAO,CAAEC,WAAY,6EAA/C,SACI,cAACL,EAAA,EAAD,CAAKQ,QAAQ,OAAOiC,eAAe,SAASC,WAAW,SAASC,UAAU,QAA1E,SAEI,cAAC3C,EAAA,EAAD,CAAKC,EAAG,EAAGC,aAAc,GAAI0C,UAAW,EAAGxC,MAAO,CAAEyC,gBAAiB,2BAA4BC,MAAO,OAAxG,SACI,uBAAMC,SApBZ,SAACnB,GACfA,EAAMoB,iBACDzB,GACDpD,EAAW,CAAEZ,OAAQwC,OAAO0B,GAAcjE,SAAU6D,EAAgB7D,SAAUC,UAAW4D,EAAgB5D,UAAWC,QAASsD,OAAOK,EAAgB3D,WACpJ4D,EAAQ,CAAE/D,OAAQ,GAAIC,SAAU,GAAIC,UAAW,GAAIC,QAAS,IAC5D8D,GAAgB,KAEhB7D,EAAW,CAAEJ,OAAQ8D,EAAgB9D,OAAQC,SAAU6D,EAAgB7D,SAAUC,UAAW4D,EAAgB5D,UAAWC,QAASsD,OAAOK,EAAgB3D,WACvJ4D,EAAQ,CAAE/D,OAAQ,GAAIC,SAAU,GAAIC,UAAW,GAAIC,QAAS,MAYjBuF,aAAa,MAAxC,UACI,eAACC,EAAA,EAAD,CAAa3C,QAAQ,SAASO,MAAM,UAAUV,MAAO,CAAEI,QAAS,QAAS2C,aAAc,QAAvF,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,mBAApB,kBACA,cAACC,EAAA,EAAD,CAAaC,KAAK,OAAO7D,GAAG,mBAAmBoC,MAAOT,EAAgB7D,SAAUgG,SAAU7B,EAAgBhC,KAAK,WAAW8D,UAAQ,EAACC,WAAS,EAACT,aAAa,WAE9J,eAACC,EAAA,EAAD,CAAa3C,QAAQ,SAASO,MAAM,UAAUV,MAAO,CAAEI,QAAS,QAAS2C,aAAc,QAAvF,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,qBAApB,mBACA,cAACC,EAAA,EAAD,CAAaC,KAAK,OAAO7D,GAAG,qBAAqBoC,MAAOT,EAAgB5D,UAAW+F,SAAU7B,EAAgBhC,KAAK,YAAY8D,UAAQ,EAACC,WAAS,EAACT,aAAa,WAElK,eAACC,EAAA,EAAD,CAAa3C,QAAQ,SAASO,MAAM,UAAUV,MAAO,CAAEI,QAAS,QAAS2C,aAAc,QAAvF,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,qBAApB,iBACA,cAACC,EAAA,EAAD,CAAaC,KAAK,SAAS7D,GAAG,qBAAqBoC,MAAOT,EAAgB3D,QAAS8F,SAAU7B,EAAgBhC,KAAK,UAAU8D,UAAQ,EAACC,WAAS,EAACT,aAAa,WAE/J1B,EAAe,cAACoC,EAAA,EAAD,CAAQJ,KAAK,SAASnD,MAAO,CACzCS,SAAU,GACVC,MAAO,UACP8C,QAAS,WACTC,WAAY,IACZhB,gBAAiB,WAElBiB,QAAS,cAACC,EAAA,EAAD,IAPI,qBAQV,cAACJ,EAAA,EAAD,CAAQJ,KAAK,SAASnD,MAAO,CAC3BS,SAAU,GACVC,MAAO,OACP8C,QAAS,WACTf,gBAAiB,oBAElBtC,QAAQ,YAAYO,MAAM,YAAYgD,QAAS,cAAClD,EAAA,EAAD,mBANhD,6BAWtB,cAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIpC,MAAO,CAAEC,WAAY,0EAA/C,SACI,cAACL,EAAA,EAAD,CAAKC,EAAG,EAAR,SACKkB,EAAS6C,KAAI,SAACzE,EAAW0E,GACtB,OACI,mCACI,cAAC,EAAD,CAAa1E,KAAMA,EAAMC,UAAWA,mB,OC/DzD0E,EA7Ba,WACxB,IAAM3G,EAAc4G,cACdC,EAAcjF,GAAc,SAACtB,GAC/B,OAAOA,EAAMT,MAAME,eAIvB,OAFoB4B,GAAgB,SAACL,GAAD,OAAWA,EAAMzB,MAAMqB,cAC3DA,CAAYlB,GAER,4CAA8B,KAAvB6G,EAAY7G,OAAgB,cAAC6E,EAAA,EAAD,CAAMC,WAAS,EAAf,SAC/B,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIpC,MAAO,CAAEC,WAAY,6EAAhD,SACI,cAACL,EAAA,EAAD,CAAKQ,QAAQ,OAAOiC,eAAe,SAASC,WAAW,SAASC,UAAU,QAA1E,SAEI,eAAC3C,EAAA,EAAD,CAAKC,EAAG,EAAGC,aAAc,GAAIC,GAAI,EAAGC,MAAO,CAAEC,WAAY,oBAAzD,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,qBAA8D4D,EAAY5G,YAC1E,eAAC8C,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,uBAAgE4D,EAAY3G,UAA5E,OACA,eAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAO,CAAEI,QAAS,QAA3C,qBAA8D4D,EAAY1G,aAHMsD,OAAOoD,EAAY7G,eAY/G,6I,gBCpBN8G,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAM,cAqBGG,MAhBf,WACE,OACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACA,cAAC,IAAD,CAAexF,MAAOA,EAAtB,SAEE,cAAC,IAAD,CAAeiG,SAAS,wBAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/D,IACjC,cAAC,IAAD,CAAO6D,OAAK,EAACC,KAAK,uBAAuBC,UAAWf,cCjB/CgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05dd2a74.chunk.js","sourcesContent":["  \r\nimport users, { UsersModel } from './Actions';\r\n\r\nexport interface StoreModel {\r\n  users: UsersModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  users\r\n};\r\n\r\nexport default model;","import { action, Action } from 'easy-peasy'\r\nimport Idata from './Interfaces'\r\nexport interface UsersModel {\r\n  items: Idata[];\r\n  userDetails: Idata;\r\n  createUser: Action<UsersModel, Idata>;\r\n  setUserInfo: Action<UsersModel, Idata>;\r\n  removeUser: Action<UsersModel, number | string>;\r\n  updateUser: Action<UsersModel, Idata>;\r\n}\r\n\r\nconst users: UsersModel = {\r\n  items: [],\r\n  userDetails: {\r\n    userId: '',\r\n    userName: '',\r\n    userEmail: '',\r\n    userAge: 0\r\n\r\n  },\r\n  createUser: action((state, payload) => {\r\n    state.items.push(payload);\r\n  }),\r\n  removeUser: action((state, payload) => {\r\n    state.items = state.items.filter((user) => user.userId !== payload);\r\n  }),\r\n  updateUser: action((state, payload) => {\r\n    const userUpdateIndex = state.items.findIndex((user) => {\r\n      return user.userId === payload.userId\r\n    });\r\n    console.log(payload)\r\n      if(userUpdateIndex !== undefined){\r\n        state.items[userUpdateIndex].userName = payload.userName\r\n        state.items[userUpdateIndex].userEmail = payload.userEmail\r\n        state.items[userUpdateIndex].userAge = payload.userAge\r\n      }\r\n  }),\r\n  setUserInfo: action((state, payload) => {\r\n    const userDetailsOnFind = state.items.find(val => val.userId === payload.userId);\r\n    if(userDetailsOnFind?.userId === payload.userId)\r\n    {\r\n      state.userDetails.userId = userDetailsOnFind.userId\r\n      state.userDetails.userName = userDetailsOnFind.userName;\r\n      state.userDetails.userEmail = userDetailsOnFind.userEmail;\r\n      state.userDetails.userAge = userDetailsOnFind.userAge;\r\n    }\r\n  }),\r\n};\r\n\r\nexport default users;","import { createStore, persist } from 'easy-peasy';\r\nimport model from './Modals';\r\nimport { createTypedHooks } from \"easy-peasy\";\r\nimport { StoreModel } from \"./Modals\";\r\n\r\nconst store = createStore(persist(model));\r\n\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nstore.persist.clear();\r\n\r\n\r\nexport default store;","\r\nimport { Box,Icon, IconButton, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport Idata from '../../Easy-peasy/Interfaces';\r\nimport { useStoreActions } from '../../Easy-peasy/Store';\r\n\r\n\r\ninterface Props {\r\n    data: Idata;\r\n    editItems(uniqueid: Idata): void;\r\n\r\n}\r\n\r\nconst UserDisplay = ({ data, editItems }: Props) => {\r\n\r\n    const removeUser = useStoreActions((store) => store.users.removeUser);\r\n\r\n    const deleteItem = async (id: number, name: string) => {\r\n        const isConfirmed = window.confirm(`Deleting a User \\nid: ${id} \\nName: ${name} \\ncan't be restored?`);\r\n        if (!isConfirmed) return;\r\n        removeUser(String(id));\r\n    }\r\n\r\n    return (\r\n        <>\r\n    \r\n            <div key={Number(data.userId)}>\r\n                <Box p={2} borderRadius={10} mb={2} style={{ background: 'rgb(85, 41, 220)' }} key={Number(data.userId)}>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}> Name : {data.userName}</Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}>  Email : {data.userEmail} </Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}>  Age : {data.userAge}</Typography>\r\n                    <IconButton size=\"medium\" onClick={() => { editItems(data); }} aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='secondary' className=\"fas fa-pencil-alt\"></Icon>\r\n                    </IconButton>\r\n                    <IconButton size=\"medium\" onClick={() => { deleteItem(Number(data.userId), data.userName); }} aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='primary' className=\"fas fa-trash\"></Icon>\r\n                    </IconButton>\r\n                    <Link to={'/information/' + data.userId}>\r\n                    <IconButton size=\"medium\" aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='error' className=\"fas fa-arrow-circle-right\"></Icon>\r\n                    </IconButton>\r\n                   </Link>\r\n\r\n                </Box>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserDisplay;","import React, { useState, FC, ChangeEvent } from 'react'\r\nimport UserDisplay from '../DisplayUserInfo/UserDisplay';\r\nimport { Box, Button, FilledInput, FormControl, Grid, Icon, InputLabel } from '@material-ui/core';\r\nimport { CloudCircleRounded } from '@material-ui/icons';\r\nimport { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\nimport Idata from '../../Easy-peasy/Interfaces';\r\n\r\n\r\nconst UserForm: FC = () => {\r\n    const userdata = useStoreState((store) => store.users.items);\r\n    const createUser = useStoreActions((store) => store.users.createUser);\r\n\r\n    const updateUser = useStoreActions((store) => store.users.updateUser);\r\n\r\n    const [userInformation, setInfo] = useState<Idata>({ userId: \"\", userName: '', userEmail: '', userAge: undefined });\r\n    const [toggleButton, setToggleButton] = useState(false);\r\n    const [iseditItems, setIsEditItem] = useState<String>();\r\n\r\n\r\n    const inputEventName = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        const { name, value } = event.target;\r\n        setInfo({ ...userInformation, [name]: value, userId: String(Number(Math.random().toString().slice(2, 11))) });\r\n    };\r\n\r\n    // edit the current data card\r\n    const editItems = (userinfo: Idata) => {\r\n\r\n        console.log(userinfo)\r\n        if (userinfo.userId) {\r\n            setIsEditItem(userinfo.userId)\r\n            setToggleButton(true);\r\n            setInfo({\r\n                userId: String(userinfo.userId), userName: userinfo.userName, userEmail: userinfo.userEmail, userAge: userinfo\r\n                    .userAge\r\n            });\r\n            return userinfo.userId;\r\n        }\r\n        return null\r\n    }\r\n\r\n    const onSubmits = (event: React.MouseEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if ((toggleButton)) {\r\n            updateUser({ userId: String(iseditItems), userName: userInformation.userName, userEmail: userInformation.userEmail, userAge: Number(userInformation.userAge) })\r\n            setInfo({ userId: \"\", userName: '', userEmail: '', userAge: 0 });\r\n            setToggleButton(false);\r\n        } else {\r\n            createUser({ userId: userInformation.userId, userName: userInformation.userName, userEmail: userInformation.userEmail, userAge: Number(userInformation.userAge) });\r\n            setInfo({ userId: \"\", userName: '', userEmail: '', userAge: 0 });\r\n        }\r\n    }\r\n\r\n    //redering the JSX and UserDisplay component\r\n    return (\r\n        <>\r\n            <Grid container  >\r\n                <Grid item md={8} xs={12} style={{ background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)' }}>\r\n                    <Box display='flex' justifyContent='center' alignItems='center' minHeight='100vh' >\r\n\r\n                        <Box p={5} borderRadius={15} boxShadow={3} style={{ backgroundColor: \"rgba(148,187,233,1) 100%\", width: '50%' }}>\r\n                            <form onSubmit={onSubmits} autoComplete=\"off\">\r\n                                <FormControl variant=\"filled\" color='primary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-filled\">Name</InputLabel>\r\n                                    <FilledInput type='text' id=\"component-filled\" value={userInformation.userName} onChange={inputEventName} name=\"userName\" required fullWidth autoComplete=\"off\" />\r\n                                </FormControl>\r\n                                <FormControl variant=\"filled\" color='primary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-outlined\">Email</InputLabel>\r\n                                    <FilledInput type='text' id=\"component-outlined\" value={userInformation.userEmail} onChange={inputEventName} name=\"userEmail\" required fullWidth autoComplete=\"off\" />\r\n                                </FormControl>\r\n                                <FormControl variant=\"filled\" color='primary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-outlined\">Age</InputLabel>\r\n                                    <FilledInput type='number' id=\"component-outlined\" value={userInformation.userAge} onChange={inputEventName} name=\"userAge\" required fullWidth autoComplete=\"off\" />\r\n                                </FormControl>\r\n                                {toggleButton ? <Button type=\"submit\" style={{\r\n                                    fontSize: 16,\r\n                                    color: '#C0392B',\r\n                                    padding: '6px 12px',\r\n                                    lineHeight: 1.5,\r\n                                    backgroundColor: '#F4D03F',\r\n\r\n                                }} endIcon={<CloudCircleRounded />}> Update</Button>\r\n                                    : <Button type=\"submit\" style={{\r\n                                        fontSize: 16,\r\n                                        color: '#fff',\r\n                                        padding: '6px 12px',\r\n                                        backgroundColor: 'rgb(240, 21, 13)',\r\n\r\n                                    }} variant=\"contained\" color=\"secondary\" endIcon={<Icon>send</Icon>}>Submit</Button>}\r\n                            </form>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={4} xs={12} style={{ background: 'linear-gradient(90deg, rgba(240,28,89,1) 0%, rgba(233,215,153,1) 100%)' }}>\r\n                    <Box p={3}>\r\n                        {userdata.map((data: any, key: number) => {\r\n                            return (\r\n                                <>\r\n                                    <UserDisplay data={data} editItems={editItems} />\r\n\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default UserForm","\r\nimport { Box, Typography, Grid } from '@material-ui/core';\r\nimport { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\nconst DynamicUserInfo: FC = () => {\r\n    const userId: any = useParams();\r\n    const userdetails = useStoreState((state) => {\r\n        return state.users.userDetails\r\n    });\r\n    const setUserInfo = useStoreActions((store) => store.users.setUserInfo);\r\n    setUserInfo(userId);\r\n    return (\r\n        <>    {userdetails.userId !== \"\" ? <Grid container  >\r\n            <Grid item md={12} xs={12} style={{ background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)' }}>\r\n                <Box display='flex' justifyContent='center' alignItems='center' minHeight='100vh' >\r\n\r\n                    <Box p={2} borderRadius={10} mb={2} style={{ background: 'rgb(85, 41, 220)' }} key={Number(userdetails.userId)}>\r\n                        <Typography variant='h6' style={{ display: 'flex' }}> Name : {userdetails.userName}</Typography>\r\n                        <Typography variant='h6' style={{ display: 'flex' }}>  Email : {userdetails.userEmail} </Typography>\r\n                        <Typography variant='h6' style={{ display: 'flex' }}>  Age : {userdetails.userAge}</Typography>\r\n\r\n                    </Box>\r\n\r\n\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n            :\r\n            <h1>Sorry! the page your are visiting does'nt contain any information or the id is invalid. Try again later</h1>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DynamicUserInfo\r\n","\nimport UserForm from './Components/UserInputForm/UserForm';\nimport DynamicUserInfo from './Components/DynamicUserInfomation/DynamicUserInfo';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { StoreProvider } from 'easy-peasy'\nimport store from './Easy-peasy/Store'\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#ff1744'\n    },\n    secondary: {\n      main: '#69f0ae'\n    },\n    error: {\n      main: '#cddc39'\n    }\n  }\n})\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n    <StoreProvider store={store}>\n\n      <BrowserRouter basename=\"/userform-typescript/\">\n        <Switch>\n          <Route exact path=\"/\" component={UserForm}></Route>\n          <Route exact path=\"/information/:userId\" component={DynamicUserInfo} ></Route>\n        </Switch>\n      </BrowserRouter>\n    </StoreProvider >\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}