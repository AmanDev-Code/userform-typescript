{"version":3,"sources":["Easy-peasy/Modals.ts","Easy-peasy/Actions.ts","Easy-peasy/Store.ts","Components/DisplayUserInfo/UserDisplay.tsx","Components/UserInputForm/UserForm.tsx","Components/DynamicUserInfomation/DynamicUserInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["model","users","userDetails","userId","userName","userEmail","userAge","undefined","createUser","action","state","payload","console","log","push","removeUser","filter","user","updateUser","userUpdateIndex","findIndex","setUserInfo","userDetailsOnFind","find","val","store","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","useStyles","makeStyles","Box","background","UserDisplay","info","editItems","classes","deleteItem","id","name","a","window","confirm","String","p","borderRadius","mb","className","Typography","variant","style","display","IconButton","size","onClick","Icon","fontSize","color","Number","to","SubmitButton","padding","backgroundColor","lineHeight","borderColor","boxShadow","UpdateButton","GridForm","GridDisplay","BoxForm","width","FormControl","marginBottom","Reset","UserForm","styles","userdata","useState","userInformation","setInfo","handleConfig","submitButtonText","submitButtonProps","endIcon","CloudCircleRounded","userConfig","type","valueKey","fieldProps","label","fullWidth","required","editUser","userinfo","clearAllUsers","clear","location","reload","Grid","container","item","md","xs","justifyContent","alignItems","minHeight","formId","actionConfig","initialValues","config","onSubmit","values","onSubmitProps","flush","Math","random","toString","slice","setSubmitting","enableReinitialize","length","Button","map","data","key","DynamicUserInfo","useParams","userdetails","theme","createTheme","palette","primary","main","secondary","error","spacing","App","ThemeProvider","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c4e98b7.chunk.js","sourcesContent":["  \r\nimport users, { UsersModel } from './Actions';\r\n\r\nexport interface StoreModel {\r\n  users: UsersModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  users\r\n};\r\n\r\nexport default model;","import { action, Action } from 'easy-peasy'\r\nimport UserDetails from './Interfaces'\r\n\r\nexport interface UsersModel {\r\n  users: UserDetails[];\r\n  userDetails: UserDetails;\r\n  createUser: Action<UsersModel, UserDetails>;\r\n  setUserInfo: Action<UsersModel, UserDetails>;\r\n  removeUser: Action<UsersModel, number | string>;\r\n  updateUser: Action<UsersModel, UserDetails>;\r\n}\r\n\r\nconst users: UsersModel = {\r\n  users: [],\r\n  userDetails: {\r\n    userId: '',\r\n    userName: '',\r\n    userEmail: '',\r\n    userAge: undefined\r\n  },\r\n  \r\n  createUser: action((state, payload) => {\r\n    console.log(payload)\r\n    state.users.push(payload);\r\n    console.log(payload)\r\n  }),\r\n\r\n  removeUser: action((state, payload) => {\r\n    state.users = state.users.filter((user) => user.userId !== payload);\r\n  }),\r\n\r\n  updateUser: action((state, payload) => {\r\n    const userUpdateIndex = state.users.findIndex((user) => {\r\n      return user.userId === payload.userId\r\n    });\r\n    if (userUpdateIndex === -1 ) {\r\n      return undefined\r\n    }\r\n    state.users[userUpdateIndex] = payload\r\n  }),\r\n\r\n  setUserInfo: action((state, payload) => {\r\n    const userDetailsOnFind = state.users.find(val => val.userId === payload.userId);\r\n    if (userDetailsOnFind?.userId !== payload.userId) {\r\n      return undefined\r\n    }\r\n    state.userDetails = userDetailsOnFind\r\n  }),\r\n};\r\n\r\nexport default users;","import { createStore, persist } from 'easy-peasy';\r\nimport model from './Modals';\r\nimport { createTypedHooks } from \"easy-peasy\";\r\nimport { StoreModel } from \"./Modals\";\r\n\r\nconst store = createStore(persist(model));\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nexport default store;","\r\nimport { Box,Icon, IconButton, makeStyles, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport UserDetails from '../../Easy-peasy/Interfaces';\r\nimport { useStoreActions } from '../../Easy-peasy/Store';\r\n\r\ninterface Props {\r\n    info: UserDetails;\r\n    editItems(uniqueid: UserDetails): void;\r\n\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    Box: {\r\n        background: 'rgb(85, 41, 220)'\r\n    }\r\n})\r\n\r\nconst UserDisplay = ({ info, editItems }: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const removeUser = useStoreActions((store) => store.users.removeUser);\r\n\r\n    const deleteItem = async (id: number, name: string) => {\r\n        const isConfirmed = window.confirm(`Deleting a User \\nid: ${id} \\nName: ${name} \\ncan't be restored?`);\r\n        if (!isConfirmed) return;\r\n        removeUser(String(id));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div key={Number(info.userId)}>\r\n                <Box p={2} borderRadius={10} mb={2} className={classes.Box} key={Number(info.userId)}>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}> Name  : {info.userName}</Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}> Email : {info.userEmail} </Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}> Age : {info.userAge}</Typography>\r\n                    <IconButton size=\"medium\" onClick={() => { editItems(info); }} aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='secondary' className=\"fas fa-pencil-alt\"></Icon>\r\n                    </IconButton>\r\n                    <IconButton size=\"medium\" onClick={() => { deleteItem(Number(info.userId), info.userName); }} aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='primary' className=\"fas fa-trash\"></Icon>\r\n                    </IconButton>\r\n                    <Link to={'/information/' + info.userId}>\r\n                    <IconButton size=\"medium\" aria-label=\"edit\">\r\n                        <Icon fontSize='large' color='error' className=\"fas fa-arrow-circle-right\"></Icon>\r\n                    </IconButton>\r\n                   </Link>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserDisplay;","import React, { useState, FC } from 'react'\r\nimport UserDisplay from '../DisplayUserInfo/UserDisplay';\r\nimport { Box, Button, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { CloudCircleRounded } from '@material-ui/icons';\r\nimport store, { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\nimport UserDetails from '../../Easy-peasy/Interfaces';\r\nimport { ReactForm, IFormActionProps, IFieldProps, IProps, getFieldError } from 'react-forms';\r\nimport { FormikHelpers } from 'formik';\r\n\r\nconst useStyles = makeStyles({\r\n    SubmitButton: {\r\n        fontSize: 16,\r\n        color: '#fff',\r\n        padding: '6px 12px',\r\n        backgroundColor: 'rgb(240, 21, 13)',\r\n        lineHeight: 1.5,\r\n        '&:hover': {\r\n            backgroundColor: '#F4D03F',\r\n            borderColor: '#21618C',\r\n            color: '#C0392B',\r\n            boxShadow: 'none',\r\n        },\r\n    },\r\n    UpdateButton: {\r\n        fontSize: 16,\r\n        color: '#C0392B',\r\n        padding: '6px 12px',\r\n        lineHeight: 1.5,\r\n        backgroundColor: '#F4D03F',\r\n        '&:hover': {\r\n            backgroundColor: 'rgb(240, 21, 13)',\r\n            borderColor: '#21618C',\r\n            color: '#fff',\r\n            boxShadow: 'none',\r\n        },\r\n    },\r\n    GridForm: {\r\n        background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)',\r\n    },\r\n    GridDisplay: {\r\n        background: 'linear-gradient(90deg, rgba(240,28,89,1) 0%, rgba(233,215,153,1) 100%)',\r\n    },\r\n    BoxForm: {\r\n        backgroundColor: \"rgba(148,187,233,1) 100%\",\r\n        width: '50%',\r\n    },\r\n    FormControl: {\r\n        display: 'block',\r\n        marginBottom: '20px',\r\n    },\r\n    Reset: {\r\n        marginBottom: '10px',\r\n        fontSize: 16,\r\n        color: '#C0392B',\r\n        padding: '6px 12px',\r\n        lineHeight: 1.5,\r\n        backgroundColor: '#F4D03F',\r\n        width: '100%',\r\n        '&:hover': {\r\n            backgroundColor: 'rgb(240, 21, 13)',\r\n            borderColor: '#21618C',\r\n            color: '#fff',\r\n            boxShadow: 'none',\r\n        },\r\n    }\r\n});\r\n\r\nconst UserForm: FC = () => {\r\n\r\n    const styles = useStyles();\r\n\r\n    const userdata = useStoreState((store) => store.users.users);\r\n    const createUser = useStoreActions((store) => store.users.createUser);\r\n    const updateUser = useStoreActions((store) => store.users.updateUser);\r\n\r\n    const [userInformation, setInfo] = useState<UserDetails>({ userId: \"\", userName: '', userEmail: '', userAge: '' });\r\n    const handleConfig: IFormActionProps = {\r\n        submitButtonText: (userInformation.userId === \"\") ? 'Submit' : 'Update',\r\n        submitButtonProps: {\r\n            className: (userInformation.userId === \"\") ? styles.SubmitButton : styles.UpdateButton,\r\n            variant: \"contained\",\r\n            color: \"secondary\",\r\n            size: 'large',\r\n            endIcon: (userInformation.userId === \"\") ? <Icon>send</Icon> : <CloudCircleRounded />\r\n        },\r\n    };\r\n\r\n    const userConfig = [{\r\n        type: 'text',\r\n        valueKey: 'userName',\r\n        fieldProps: { variant: \"filled\", label: 'Name', className: styles.FormControl, color: 'primary', fullWidth: true, required: true },\r\n\r\n    },\r\n    {\r\n        type: 'text',\r\n        valueKey: 'userEmail',\r\n        fieldProps: { variant: \"filled\", label: 'Email', className: styles.FormControl, color: 'primary', fullWidth: true, required: true }\r\n    },\r\n    {\r\n        type: \"text\",\r\n        valueKey: 'userAge',\r\n        fieldProps: { variant: \"filled\", label: 'Age', className: styles.FormControl, color: 'primary', fullWidth: true, required: true }\r\n    },\r\n    ]\r\n\r\n\r\n    // edit the current data card\r\n    const editUser = (userinfo: UserDetails) => {\r\n        if (userinfo.userId) {\r\n            setInfo({\r\n                userId: userinfo.userId, userName: userinfo.userName, userEmail: userinfo.userEmail, userAge: userinfo\r\n                    .userAge\r\n            });\r\n            return userinfo.userId;\r\n        }\r\n        return null\r\n    }\r\n\r\n    const onSubmits = (values: UserDetails, onSubmitProps: FormikHelpers<UserDetails>) => {\r\n        if ((userInformation.userId)) {\r\n            updateUser({ userId: String(userInformation.userId), userName: values.userName, userEmail: values.userEmail, userAge: Number(values.userAge) })\r\n            setInfo({ userId: \"\", userName: '', userEmail: '', userAge: 0 });\r\n            store.persist.flush();\r\n        } else {\r\n            createUser({ userId: String(Number(Math.random().toString().slice(2, 11))), userName: values.userName, userEmail: values.userEmail, userAge: Number(values.userAge) });\r\n            setInfo({ userId: \"\", userName: '', userEmail: '', userAge: 0 });\r\n            store.persist.flush();\r\n        }\r\n        onSubmitProps.setSubmitting(false);\r\n    }\r\n\r\n    const clearAllUsers = async () => {\r\n        await store.persist.clear();\r\n        window.location.reload();\r\n    }\r\n\r\n    //redering the JSX and UserDisplay component\r\n    return (\r\n        <>\r\n            <Grid container  >\r\n                <Grid item md={8} xs={12} className={styles.GridForm}>\r\n                    <Box display='flex' justifyContent='center' alignItems='center' minHeight='100vh' >\r\n                        <Box p={5} borderRadius={15} boxShadow={3} className={styles.BoxForm}>\r\n                            <ReactForm formId='userForm'\r\n                                actionConfig={handleConfig}\r\n                                initialValues={userInformation}\r\n                                config={userConfig}\r\n                                onSubmit={onSubmits}\r\n                                enableReinitialize\r\n                            />\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={4} xs={12} className={styles.GridDisplay}>\r\n\r\n                    <Box p={2}>\r\n                        {userdata.length > 1 ? <Button type=\"reset\" className={styles.Reset} variant=\"contained\" color=\"secondary\" onClick={() => { clearAllUsers() }} endIcon={<i className=\"fas fa-broom\"></i>}>Clear All</Button> : null}\r\n                        {userdata.map((data: any, key: number) => {\r\n                            return (\r\n                                <>\r\n                                    <UserDisplay info={data} editItems={editUser} />\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default UserForm;\r\n\r\n","import { Box, Typography, Grid, makeStyles } from '@material-ui/core';\r\nimport { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\n\r\nconst useStyles = makeStyles({\r\n    Grid: {\r\n        background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)',\r\n    },\r\n    Box: {\r\n        background: 'rgb(85, 41, 220)',\r\n    },\r\n    Typography: {\r\n        display: 'flex'\r\n    }\r\n})\r\n\r\nconst DynamicUserInfo: FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const userId: any = useParams();\r\n\r\n    const userdetails = useStoreState((state) => {\r\n        return state.users.userDetails\r\n    });\r\n    const { setUserInfo } = useStoreActions((store) => store.users);\r\n\r\n    setUserInfo(userId);\r\n\r\n    return (\r\n        <>\r\n            {userdetails.userId !== null ? <Grid container  >\r\n                <Grid item md={12} xs={12} className={classes.Grid}>\r\n                    <Box display='flex' justifyContent='center' alignItems='center' minHeight='100vh' >\r\n\r\n                        <Box p={2} borderRadius={10} mb={2} className={classes.Box} key={Number(userdetails.userId)}>\r\n                            <Typography variant='h6' className={classes.Typography}> Name : {userdetails.userName}</Typography>\r\n                            <Typography variant='h6' className={classes.Typography}>  Email : {userdetails.userEmail} </Typography>\r\n                            <Typography variant='h6' className={classes.Typography}>  Age : {userdetails.userAge}</Typography>\r\n\r\n                        </Box>\r\n\r\n\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n                :\r\n                <h1>Sorry! the page your are visiting does'nt contain any information or the id is invalid. Try again later</h1>}\r\n        </>\r\n    )\r\n}\r\nexport default DynamicUserInfo;\r\n","import UserForm from './Components/UserInputForm/UserForm';\nimport DynamicUserInfo from './Components/DynamicUserInfomation/DynamicUserInfo';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { StoreProvider } from 'easy-peasy'\nimport store from './Easy-peasy/Store'\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#ff1744'\n    },\n    secondary: {\n      main: '#69f0ae'\n    },\n    error: {\n      main: '#cddc39'\n    }\n  },\n  spacing: 15 ,\n\n})\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n    <StoreProvider store={store}>\n      <BrowserRouter basename=\"/userform-typescript/\">\n        <Switch>\n          <Route exact path=\"/\" component={UserForm}></Route>\n          <Route exact path=\"/information/:userId\" component={DynamicUserInfo} ></Route>\n        </Switch>\n      </BrowserRouter>\n    </StoreProvider >\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}