{"version":3,"sources":["Components/DisplayUserInfo/UserDisplay.tsx","Easy-peasy/Modals.ts","Easy-peasy/Actions.ts","Easy-peasy/Store.ts","Components/UserInputForm/UserForm.tsx","Components/DynamicUserInfomation/DynamicUserInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserDisplay","data","deleteItem","editItems","Box","p","borderRadius","mb","style","backgroundColor","Typography","variant","display","userName","userEmail","userAge","className","onClick","userId","Number","to","model","users","items","userDetails","createUser","action","state","payload","push","removeUser","filter","user","updateUser","userUpdateIndex","findIndex","undefined","setUserInfo","userDetailsOnFind","find","val","store","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","clear","UserForm","useState","Id","setId","userInformation","setInfo","toggleButton","setToggleButton","iseditItems","setIsEditItem","userdata","inputEventName","event","target","name","value","String","Math","random","toString","slice","userid","items_card_search_id","console","log","id","a","window","confirm","Grid","container","item","md","xs","background","justifyContent","alignItems","minHeight","boxShadow","width","onSubmit","preventDefault","alert","autoComplete","FormControl","color","marginBottom","InputLabel","htmlFor","FilledInput","onChange","required","fullWidth","Button","type","fontSize","padding","lineHeight","endIcon","CloudCircleRounded","Icon","map","key","DynamicUserInfo","useParams","userdetails","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d700b77.chunk.js","sourcesContent":["\r\nimport { Box, Fab, Tooltip, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport Idata from '../../Easy-peasy/Interfaces';\r\n\r\n\r\ninterface Props {\r\n    data: Idata;\r\n    deleteItem(uniqueid: number | string, userName: string): void;\r\n    editItems(uniqueid: String): void;\r\n\r\n}\r\n\r\nconst UserDisplay = ({ data, deleteItem, editItems }: Props) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div key={Number(data.userId)}>\r\n                <Box p={2} borderRadius={10} mb={2} style={{ backgroundColor: '#d8f3dc' }} key={Number(data.userId)}>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}> Name : {data.userName}</Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}>  Email : {data.userEmail} </Typography>\r\n                    <Typography variant='h6' style={{ display: 'flex' }}>  Age : {data.userAge}</Typography>\r\n                    <div><i className=\"fas fa-edit\" onClick={() => { editItems(data.userId); }}></i>\r\n                        <i className=\"fas fa-trash-alt\" onClick={() => { deleteItem(Number(data.userId), data.userName); }}></i>\r\n                        <Link to={'/information/' + data.userId}>\r\n                            <i className=\"fas fa-arrow-alt-circle-right\" ></i> </Link ></div >\r\n\r\n                </Box>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserDisplay;\r\n\r\n{/* <div className=\"eachItem\" key={key}>\r\n    <h3 >{data.userName}</h3>\r\n    <h3 >{data.userEmail}</h3>\r\n    <h3 >{data.userAge}</h3>\r\n\r\n\r\n</div > */}","  \r\nimport users, { UsersModel } from './Actions';\r\n\r\nexport interface StoreModel {\r\n  users: UsersModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  users\r\n};\r\n\r\nexport default model;","import { action, Action } from 'easy-peasy'\r\nimport Idata from './Interfaces'\r\nexport interface UsersModel {\r\n  items: Idata[];\r\n  userDetails: Idata;\r\n  createUser: Action<UsersModel, Idata>;\r\n  setUserInfo: Action<UsersModel, Idata>;\r\n  removeUser: Action<UsersModel, number | string>;\r\n  updateUser: Action<UsersModel, Idata>;\r\n}\r\n\r\nconst users: UsersModel = {\r\n  items: [],\r\n  userDetails: {\r\n    userId: '',\r\n    userName: '',\r\n    userEmail: '',\r\n    userAge: 0\r\n\r\n  },\r\n  createUser: action((state, payload) => {\r\n    state.items.push(payload);\r\n  }),\r\n  removeUser: action((state, payload) => {\r\n    state.items = state.items.filter((user) => user.userId !== payload);\r\n  }),\r\n  updateUser: action((state, payload) => {\r\n    const userUpdateIndex = state.items.findIndex((user) => {\r\n      return user.userId === payload.userId\r\n    });\r\n      if(userUpdateIndex !== undefined){\r\n        state.items[userUpdateIndex].userName = payload.userName\r\n        state.items[userUpdateIndex].userEmail = payload.userEmail\r\n        state.items[userUpdateIndex].userAge = payload.userAge\r\n      }\r\n  }),\r\n  setUserInfo: action((state, payload) => {\r\n    const userDetailsOnFind = state.items.find(val => val.userId === payload.userId);\r\n    if(userDetailsOnFind?.userId === payload.userId)\r\n    {\r\n      state.userDetails.userId = userDetailsOnFind.userId\r\n      state.userDetails.userName = userDetailsOnFind.userName;\r\n      state.userDetails.userEmail = userDetailsOnFind.userEmail;\r\n      state.userDetails.userAge = userDetailsOnFind.userAge;\r\n    }\r\n  }),\r\n};\r\n\r\nexport default users;","import { createStore, persist } from 'easy-peasy';\r\nimport model from './Modals';\r\nimport { createTypedHooks } from \"easy-peasy\";\r\nimport { StoreModel } from \"./Modals\";\r\n\r\nconst store = createStore(persist(model));\r\n\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nstore.persist.clear();\r\n\r\n\r\nexport default store;","import React, { useState, FC, ChangeEvent } from 'react'\r\n\r\nimport UserDisplay from '../DisplayUserInfo/UserDisplay';\r\n\r\nimport { Box, Button, FilledInput, FormControl, Grid, Icon, InputLabel} from '@material-ui/core';\r\nimport { CloudCircleRounded} from '@material-ui/icons';\r\nimport { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\nimport Idata from '../../Easy-peasy/Interfaces';\r\n\r\n\r\nconst UserForm: FC = () => {\r\n\r\n    const createUser = useStoreActions((store) => store.users.createUser);\r\n    const removeUser = useStoreActions((store) => store.users.removeUser);\r\n    const updateUser = useStoreActions((store) => store.users.updateUser);\r\n\r\n    const [Id, setId] = useState<String>(\"\");\r\n    const [userInformation, setInfo] = useState<Idata>({ userId : \"\" , userName : '' , userEmail: '',  userAge : 0});\r\n    const [toggleButton, setToggleButton] = useState(false);\r\n    const [iseditItems, setIsEditItem] = useState<Idata | any>([]);\r\n    const userdata = useStoreState((store) => store.users.items);\r\n\r\n\r\n\r\n\r\n    const inputEventName = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        const { name , value } = event.target;\r\n        setInfo({...userInformation , [name] : value , userId: String(Number(Math.random().toString().slice(2, 11)))});\r\n    };\r\n\r\n\r\n    // edit the current data card\r\n    const editItems = (userid: String) => {\r\n        const items_card_search_id: any = userdata.find((val) => {\r\n\r\n            if (val.userId === userid) {\r\n                setId(userid)\r\n                setIsEditItem(String(Id))\r\n                console.log(iseditItems)\r\n                setToggleButton(true);\r\n                return val;\r\n\r\n            }\r\n            return null\r\n        });\r\n        setIsEditItem(items_card_search_id.userId)\r\n        console.log(items_card_search_id)\r\n        console.log(iseditItems)\r\n        setInfo({userId : items_card_search_id.userId , userName : items_card_search_id.userName , userEmail: items_card_search_id.userEmail,  userAge : items_card_search_id.userAge});\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n    // delete Item in card\r\n    const deleteItem = async (id: number, name: string) => {\r\n        const isConfirmed = window.confirm(`Deleting a User \\nid: ${id} \\nName: ${name} \\ncan't be restored?`);\r\n        if (!isConfirmed) return;\r\n        removeUser(String(id));\r\n    }\r\n\r\n    const onSubmits = (event: React.MouseEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if ((!userInformation.userName) || (!userInformation.userEmail) || (!userInformation.userAge)) {\r\n            alert(\"Please fill the data\")\r\n        } else if ((userInformation.userName) && (userInformation.userEmail) && (userInformation.userAge) && (toggleButton)) {\r\n            console.log(iseditItems)\r\n            updateUser({ userId: iseditItems, userName: userInformation.userName, userEmail: userInformation.userEmail, userAge: Number(userInformation.userAge) })\r\n            setInfo({userId : \"\" , userName : '' , userEmail: '',  userAge : 0});\r\n            setToggleButton(false);\r\n        } else {\r\n            createUser({ userId: userInformation.userId , userName: userInformation.userName, userEmail: userInformation.userEmail, userAge: Number(userInformation.userAge) });\r\n            setInfo({userId : \"\" , userName : '' , userEmail: '',  userAge : 0});\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //redering the JSX and displaying the core results\r\n    return (\r\n        <>\r\n            <Grid container  >\r\n                <Grid item md={6} xs={12} style={{ background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)' }}>\r\n                    <Box display='flex' justifyContent='center' alignItems='center' minHeight='100vh' >\r\n\r\n                        <Box p={5} borderRadius={15} boxShadow={3} style={{ backgroundColor: \"rgba(148,187,233,1) 100%\", width: '50%' }}>\r\n                            <form onSubmit={onSubmits} autoComplete=\"off\">\r\n                                <FormControl variant=\"filled\" color='secondary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-filled\">Name</InputLabel>\r\n                                    <FilledInput id=\"component-filled\" value={userInformation.userName} onChange={inputEventName} name=\"userName\" required fullWidth autoComplete=\"off\"/>\r\n                                </FormControl>\r\n                                <FormControl variant=\"filled\" color='secondary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-outlined\">Email</InputLabel>\r\n                                    <FilledInput id=\"component-outlined\" value={userInformation.userEmail} onChange={inputEventName} name=\"userEmail\" required fullWidth autoComplete=\"off\" />\r\n                                </FormControl>\r\n                                <FormControl variant=\"filled\" color='secondary' style={{ display: 'block', marginBottom: '20px' }}>\r\n                                    <InputLabel htmlFor=\"component-outlined\">Age</InputLabel>\r\n                                    <FilledInput id=\"component-outlined\" value={userInformation.userAge} onChange={inputEventName} name=\"userAge\" required fullWidth autoComplete=\"off\" />\r\n                                </FormControl>\r\n                                {toggleButton ? <Button type=\"submit\" style={{\r\n                                    fontSize: 16,\r\n                                    color: '#C0392B',\r\n                                    padding: '6px 12px',\r\n                                    lineHeight: 1.5,\r\n                                    backgroundColor: '#F4D03F',\r\n                                    \r\n                                }} endIcon={<CloudCircleRounded />}> Update</Button>\r\n                                    : <Button type=\"submit\" style={{\r\n                                        fontSize: 16,\r\n                                        color: '#fff',\r\n                                        padding: '6px 12px',\r\n                                        backgroundColor: 'rgb(240, 21, 13)',\r\n                                        \r\n                                    }} variant=\"contained\" color=\"secondary\" endIcon={<Icon>send</Icon>}>Submit</Button>}\r\n                            </form>\r\n\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={6} xs={12} style={{ background: 'linear-gradient(90deg, rgba(240,28,89,1) 0%, rgba(233,215,153,1) 100%)'}}>\r\n                    <Box p={3}>\r\n                        {userdata.map((data: any, key: number) => {\r\n                            return (\r\n                                <>\r\n                                    <UserDisplay data={data} deleteItem={deleteItem} editItems={editItems} />\r\n\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserForm","\r\nimport { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStoreActions, useStoreState } from '../../Easy-peasy/Store';\r\nimport '../style.css'\r\n\r\nconst DynamicUserInfo: FC = () => {\r\n    const userId: any = useParams();\r\n    const userdetails = useStoreState((state) => {\r\n        return state.users.userDetails\r\n    });\r\n    const setUserInfo = useStoreActions((store) => store.users.setUserInfo);\r\n    setUserInfo(userId);\r\n    return (\r\n        <>\r\n            <div className=\"showItems\" >\r\n                <div className='eachItem'>\r\n                    <h1>Name: {userdetails.userName}</h1>\r\n                    <h1>Email: {userdetails.userEmail}</h1>\r\n                    <h1>Age: {userdetails.userAge}</h1>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DynamicUserInfo\r\n","\nimport UserForm from './Components/UserInputForm/UserForm';\nimport DynamicUserInfo from './Components/DynamicUserInfomation/DynamicUserInfo';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { StoreProvider } from 'easy-peasy'\nimport store from './Easy-peasy/Store'\n\n\nfunction App() {\n  return (\n    <StoreProvider store={store}>\n      \n            <BrowserRouter basename=\"/userform-typescript/\">\n              <Switch>\n                <Route exact path=\"/\" component={UserForm}></Route>\n                <Route exact path=\"/information/:userId\" component={DynamicUserInfo} ></Route>\n              </Switch>\n            </BrowserRouter>\n          \n    </StoreProvider >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}